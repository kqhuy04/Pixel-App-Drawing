import React, { useState } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { Sparkles, Wand2, Palette, Play, Upload, Download, Loader2, RefreshCw } from 'lucide-react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Badge } from './ui/badge';
import { Card } from './ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';

interface AIFeaturesProps {
  currentArtwork?: string; // Base64 or URL of current artwork
  onApplyResult?: (result: string) => void;
}

const artStyles = [
  { id: 'anime', label: 'Anime', preview: 'üéå' },
  { id: 'pixel', label: 'Pixel Art', preview: 'üéÆ' },
  { id: 'watercolor', label: 'Watercolor', preview: 'üé®' },
  { id: 'oil', label: 'Oil Painting', preview: 'üñºÔ∏è' },
  { id: 'sketch', label: 'Sketch', preview: '‚úèÔ∏è' },
  { id: 'cartoon', label: 'Cartoon', preview: 'üé™' }
];

const gameStyles = [
  { id: 'retro', label: 'Retro 8-bit', preview: 'üëæ' },
  { id: 'rpg', label: 'RPG Fantasy', preview: '‚öîÔ∏è' },
  { id: 'platformer', label: 'Platformer', preview: 'üèÉ' },
  { id: 'puzzle', label: 'Puzzle Game', preview: 'üß©' },
  { id: 'fighting', label: 'Fighting Game', preview: 'ü•ä' },
  { id: 'racing', label: 'Racing Game', preview: 'üèéÔ∏è' }
];

const animationTypes = [
  { id: 'idle', label: 'ƒê·ª©ng y√™n', preview: 'üßç' },
  { id: 'walk', label: 'ƒêi b·ªô', preview: 'üö∂' },
  { id: 'run', label: 'Ch·∫°y', preview: 'üèÉ' },
  { id: 'jump', label: 'Nh·∫£y', preview: 'ü¶ò' },
  { id: 'attack', label: 'T·∫•n c√¥ng', preview: '‚öîÔ∏è' },
  { id: 'wave', label: 'V·∫´y tay', preview: 'üëã' }
];

export const AIFeatures: React.FC<AIFeaturesProps> = ({ currentArtwork, onApplyResult }) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedStyle, setSelectedStyle] = useState('');
  const [selectedGameStyle, setSelectedGameStyle] = useState('');
  const [selectedAnimation, setSelectedAnimation] = useState('');
  const [prompt, setPrompt] = useState('');
  const [result, setResult] = useState<string | null>(null);

  const mockProcess = async (duration: number = 3000) => {
    setIsProcessing(true);
    await new Promise(resolve => setTimeout(resolve, duration));
    setIsProcessing(false);
    // Mock result
    setResult('https://via.placeholder.com/300x300/4ECDC4/FFFFFF?text=AI+Result');
  };

  const handleSketchCompletion = async () => {
    if (!currentArtwork) {
      alert('Vui l√≤ng v·∫Ω m·ªôt ph√°c th·∫£o tr∆∞·ªõc khi s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y');
      return;
    }
    await mockProcess();
  };

  const handleStyleTransfer = async () => {
    if (!currentArtwork || !selectedStyle) {
      alert('Vui l√≤ng ch·ªçn phong c√°ch v√† c√≥ t√°c ph·∫©m ƒë·ªÉ chuy·ªÉn ƒë·ªïi');
      return;
    }
    await mockProcess();
  };

  const handleCreateAnimation = async () => {
    if (!currentArtwork || !selectedAnimation) {
      alert('Vui l√≤ng ch·ªçn lo·∫°i ho·∫°t ·∫£nh v√† c√≥ t√°c ph·∫©m ƒë·ªÉ t·∫°o animation');
      return;
    }
    await mockProcess(5000); // Animation takes longer
  };

  const handleGameStyleGeneration = async () => {
    if (!prompt || !selectedGameStyle) {
      alert('Vui l√≤ng nh·∫≠p m√¥ t·∫£ v√† ch·ªçn phong c√°ch game');
      return;
    }
    await mockProcess();
  };

  const handleApplyResult = () => {
    if (result) {
      onApplyResult?.(result);
      alert('ƒê√£ √°p d·ª•ng k·∫øt qu·∫£ AI v√†o canvas!');
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <div className="text-center mb-8">
        <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
          <Sparkles className="text-white" size={24} />
        </div>
        <h2 className="mb-2">ü§ñ AI Creative Studio</h2>
        <p className="text-gray-600">
          S·ª≠ d·ª•ng s·ª©c m·∫°nh AI ƒë·ªÉ n√¢ng cao v√† bi·∫øn ƒë·ªïi t√°c ph·∫©m ngh·ªá thu·∫≠t c·ªßa b·∫°n
        </p>
      </div>

      <Tabs defaultValue="sketch" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="sketch">Ho√†n thi·ªán</TabsTrigger>
          <TabsTrigger value="style">Phong c√°ch</TabsTrigger>
          <TabsTrigger value="animation">Ho·∫°t ·∫£nh</TabsTrigger>
          <TabsTrigger value="game">Game Style</TabsTrigger>
        </TabsList>

        {/* Sketch Completion */}
        <TabsContent value="sketch" className="space-y-6">
          <Card className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <Wand2 className="text-purple-600" size={20} />
              <h3>AI Ho√†n thi·ªán ph√°c th·∫£o</h3>
            </div>
            <p className="text-gray-600 mb-6">
              V·∫Ω nh·ªØng n√©t c∆° b·∫£n, AI s·∫Ω t·ª± ƒë·ªông ho√†n thi·ªán th√†nh tranh chi ti·∫øt v√† ƒë·∫πp m·∫Øt
            </p>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="mb-3">T√°c ph·∫©m hi·ªán t·∫°i</h4>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  {currentArtwork ? (
                    <img src={currentArtwork} alt="Current artwork" className="max-w-full h-auto mx-auto" />
                  ) : (
                    <div>
                      <Upload className="mx-auto text-gray-400 mb-2" size={32} />
                      <p className="text-gray-500">Ch∆∞a c√≥ t√°c ph·∫©m</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h4 className="mb-3">K·∫øt qu·∫£ AI</h4>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  {isProcessing ? (
                    <div className="flex flex-col items-center">
                      <Loader2 className="animate-spin text-purple-600 mb-2" size={32} />
                      <p className="text-purple-600">AI ƒëang x·ª≠ l√Ω...</p>
                    </div>
                  ) : result ? (
                    <img src={result} alt="AI result" className="max-w-full h-auto mx-auto" />
                  ) : (
                    <div>
                      <Sparkles className="mx-auto text-gray-400 mb-2" size={32} />
                      <p className="text-gray-500">K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div className="flex gap-3 mt-6">
              <Button 
                onClick={handleSketchCompletion} 
                disabled={isProcessing || !currentArtwork}
                className="flex items-center gap-2"
              >
                {isProcessing ? <Loader2 className="animate-spin" size={16} /> : <Sparkles size={16} />}
                Ho√†n thi·ªán v·ªõi AI
              </Button>
              {result && (
                <Button variant="outline" onClick={handleApplyResult}>
                  <Download size={16} className="mr-1" />
                  √Åp d·ª•ng k·∫øt qu·∫£
                </Button>
              )}
            </div>
          </Card>
        </TabsContent>

        {/* Style Transfer */}
        <TabsContent value="style" className="space-y-6">
          <Card className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <Palette className="text-blue-600" size={20} />
              <h3>AI Chuy·ªÉn ƒë·ªïi phong c√°ch</h3>
            </div>
            <p className="text-gray-600 mb-6">
              Bi·∫øn ƒë·ªïi t√°c ph·∫©m c·ªßa b·∫°n sang nhi·ªÅu phong c√°ch ngh·ªá thu·∫≠t kh√°c nhau
            </p>
            
            <div className="mb-6">
              <Label className="mb-3 block">Ch·ªçn phong c√°ch ngh·ªá thu·∫≠t</Label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {artStyles.map(style => (
                  <motion.button
                    key={style.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => setSelectedStyle(style.id)}
                    className={`p-4 rounded-lg border-2 text-center transition-colors ${
                      selectedStyle === style.id
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">{style.preview}</div>
                    <div className="text-sm">{style.label}</div>
                  </motion.button>
                ))}
              </div>
            </div>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="mb-3">T√°c ph·∫©m g·ªëc</h4>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  {currentArtwork ? (
                    <img src={currentArtwork} alt="Original artwork" className="max-w-full h-auto mx-auto" />
                  ) : (
                    <div>
                      <Upload className="mx-auto text-gray-400 mb-2" size={32} />
                      <p className="text-gray-500">Ch∆∞a c√≥ t√°c ph·∫©m</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h4 className="mb-3">Phong c√°ch m·ªõi</h4>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  {isProcessing ? (
                    <div className="flex flex-col items-center">
                      <Loader2 className="animate-spin text-blue-600 mb-2" size={32} />
                      <p className="text-blue-600">ƒêang chuy·ªÉn ƒë·ªïi phong c√°ch...</p>
                    </div>
                  ) : result ? (
                    <img src={result} alt="Styled artwork" className="max-w-full h-auto mx-auto" />
                  ) : (
                    <div>
                      <Palette className="mx-auto text-gray-400 mb-2" size={32} />
                      <p className="text-gray-500">K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div className="flex gap-3 mt-6">
              <Button 
                onClick={handleStyleTransfer} 
                disabled={isProcessing || !currentArtwork || !selectedStyle}
                className="flex items-center gap-2"
              >
                {isProcessing ? <Loader2 className="animate-spin" size={16} /> : <RefreshCw size={16} />}
                Chuy·ªÉn ƒë·ªïi phong c√°ch
              </Button>
              {result && (
                <Button variant="outline" onClick={handleApplyResult}>
                  <Download size={16} className="mr-1" />
                  √Åp d·ª•ng k·∫øt qu·∫£
                </Button>
              )}
            </div>
          </Card>
        </TabsContent>

        {/* Animation */}
        <TabsContent value="animation" className="space-y-6">
          <Card className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <Play className="text-green-600" size={20} />
              <h3>AI T·∫°o ho·∫°t ·∫£nh 2D</h3>
            </div>
            <p className="text-gray-600 mb-6">
              T·ª´ m·ªôt b·ª©c tranh tƒ©nh, AI s·∫Ω t·∫°o ra nh·ªØng chuy·ªÉn ƒë·ªông sinh ƒë·ªông
            </p>
            
            <div className="mb-6">
              <Label className="mb-3 block">Ch·ªçn lo·∫°i ho·∫°t ·∫£nh</Label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {animationTypes.map(animation => (
                  <motion.button
                    key={animation.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => setSelectedAnimation(animation.id)}
                    className={`p-4 rounded-lg border-2 text-center transition-colors ${
                      selectedAnimation === animation.id
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">{animation.preview}</div>
                    <div className="text-sm">{animation.label}</div>
                  </motion.button>
                ))}
              </div>
            </div>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="mb-3">Tranh g·ªëc</h4>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  {currentArtwork ? (
                    <img src={currentArtwork} alt="Static artwork" className="max-w-full h-auto mx-auto" />
                  ) : (
                    <div>
                      <Upload className="mx-auto text-gray-400 mb-2" size={32} />
                      <p className="text-gray-500">Ch∆∞a c√≥ t√°c ph·∫©m</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h4 className="mb-3">Ho·∫°t ·∫£nh (GIF)</h4>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  {isProcessing ? (
                    <div className="flex flex-col items-center">
                      <Loader2 className="animate-spin text-green-600 mb-2" size={32} />
                      <p className="text-green-600">ƒêang t·∫°o ho·∫°t ·∫£nh...</p>
                      <p className="text-xs text-gray-500 mt-1">C√≥ th·ªÉ m·∫•t 30-60 gi√¢y</p>
                    </div>
                  ) : result ? (
                    <img src={result} alt="Animated result" className="max-w-full h-auto mx-auto" />
                  ) : (
                    <div>
                      <Play className="mx-auto text-gray-400 mb-2" size={32} />
                      <p className="text-gray-500">Ho·∫°t ·∫£nh s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div className="flex gap-3 mt-6">
              <Button 
                onClick={handleCreateAnimation} 
                disabled={isProcessing || !currentArtwork || !selectedAnimation}
                className="flex items-center gap-2"
              >
                {isProcessing ? <Loader2 className="animate-spin" size={16} /> : <Play size={16} />}
                T·∫°o ho·∫°t ·∫£nh
              </Button>
              {result && (
                <Button variant="outline" onClick={() => {
                  const link = document.createElement('a');
                  link.href = result;
                  link.download = 'animation.gif';
                  link.click();
                }}>
                  <Download size={16} className="mr-1" />
                  T·∫£i v·ªÅ GIF
                </Button>
              )}
            </div>
          </Card>
        </TabsContent>

        {/* Game Style Generation */}
        <TabsContent value="game" className="space-y-6">
          <Card className="p-6">
            <div className="flex items-center gap-2 mb-4">
              <Badge className="bg-orange-100 text-orange-800">
                üéÆ AI T·∫°o tranh game
              </Badge>
            </div>
            <p className="text-gray-600 mb-6">
              M√¥ t·∫£ √Ω t∆∞·ªüng c·ªßa b·∫°n, AI s·∫Ω t·∫°o ra nh√¢n v·∫≠t/v·∫≠t th·ªÉ theo phong c√°ch game
            </p>
            
            <div className="space-y-6">
              <div>
                <Label htmlFor="prompt" className="mb-2 block">M√¥ t·∫£ chi ti·∫øt</Label>
                <Textarea
                  id="prompt"
                  placeholder="V√≠ d·ª•: M·ªôt chi·∫øn binh c√≥ √°o gi√°p m√†u xanh, c·∫ßm ki·∫øm v√† khi√™n, phong c√°ch fantasy RPG..."
                  value={prompt}
                  onChange={e => setPrompt(e.target.value)}
                  rows={3}
                />
              </div>
              
              <div>
                <Label className="mb-3 block">Phong c√°ch game</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {gameStyles.map(style => (
                    <motion.button
                      key={style.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setSelectedGameStyle(style.id)}
                      className={`p-4 rounded-lg border-2 text-center transition-colors ${
                        selectedGameStyle === style.id
                          ? 'border-orange-500 bg-orange-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-2xl mb-2">{style.preview}</div>
                      <div className="text-sm">{style.label}</div>
                    </motion.button>
                  ))}
                </div>
              </div>
              
              <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                {isProcessing ? (
                  <div className="flex flex-col items-center">
                    <Loader2 className="animate-spin text-orange-600 mb-2" size={32} />
                    <p className="text-orange-600">AI ƒëang t·∫°o tranh...</p>
                  </div>
                ) : result ? (
                  <div>
                    <img src={result} alt="Generated game art" className="max-w-full h-auto mx-auto mb-4" />
                    <Badge variant="secondary">T·∫°o th√†nh c√¥ng!</Badge>
                  </div>
                ) : (
                  <div>
                    <Sparkles className="mx-auto text-gray-400 mb-2" size={32} />
                    <p className="text-gray-500">Tranh ƒë∆∞·ª£c t·∫°o s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
                  </div>
                )}
              </div>
              
              <div className="flex gap-3">
                <Button 
                  onClick={handleGameStyleGeneration} 
                  disabled={isProcessing || !prompt || !selectedGameStyle}
                  className="flex items-center gap-2"
                >
                  {isProcessing ? <Loader2 className="animate-spin" size={16} /> : <Sparkles size={16} />}
                  T·∫°o tranh game
                </Button>
                {result && (
                  <Button variant="outline" onClick={handleApplyResult}>
                    <Download size={16} className="mr-1" />
                    √Åp d·ª•ng k·∫øt qu·∫£
                  </Button>
                )}
              </div>
            </div>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};